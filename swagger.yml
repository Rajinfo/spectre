import re
from pathlib import Path

def swagger_updater_2(repo_name):
    try:
        lines = Path("src/main/resources/outputswagger.yaml").read_text().splitlines()
        updated_lines = []

        method_pattern = re.compile(r"^( *)(get|post|put|delete): *$", re.IGNORECASE)
        ref_pattern = re.compile(r"\$ref: '#/components/schemas/(\w+)'")
        current_method = None
        leading_spaces = ""
        ref_name = None

        for i, line in enumerate(lines):
            if line.startswith("  /"):
                updated_lines.append(f"  /{repo_name}{line.strip()}")
                continue

            method_matcher = method_pattern.match(line)
            if method_matcher:
                current_method = method_matcher.group(2).upper()
                leading_spaces = method_matcher.group(1)
                updated_lines.append(line)
                continue

            if line.strip().startswith("httpMethod:") and current_method:
                updated_lines.append(f"{leading_spaces}{leading_spaces}httpMethod: \"{current_method}\"")
            else:
                updated_lines.append(line)

            if current_method in ["PUT", "POST"]:
                if line.strip() == "requestBody:":
                    ref_line = lines[i + 4]
                    ref_matcher = ref_pattern.search(ref_line)
                    if ref_matcher:
                        ref_name = ref_matcher.group(1)
                    for j in range(i, len(lines)):
                        next_line = lines[j]
                        if next_line.strip().startswith("x-codegen-request-body-name:") and ref_name:
                            lines[j] = f"{leading_spaces}  x-codegen-request-body-name: {ref_name}"
                            break
            elif current_method in ["GET", "DELETE"]:
                if line.strip().startswith("x-codegen-request-body-name:"):
                    updated_lines.pop()

        Path("src/main/resources/outputswagger.yaml").write_text("\n".join(updated_lines))

    except IOError as e:
        print(e)

def route_creator(args, env):
    if len(args) != 2:
        print("Parameters required: <RepoName> <tag>")
        return

    route_value = ""
    if env in ["dev", "si"]:
        route_value = f"https://{args[0].lower()}-{env}.crew-mgt-{args[1]}-{env}.aws.delta.com"
    else:
        route_value = f"https://{args[0].lower()}.crew-mgt-{args[1]}-prd.aws.delta.com"

    append_value = args[0].lower()

    try:
        with open("src/main/resources/outputswagger.yaml", 'r') as reader, open(f"src/main/resources/route_creator_{env}.json", 'w') as writer:
            path_pattern = re.compile(r"^ */([^ ]*)")
            writer.write('"swaggerProps": {')
            writer.write("\n")
            for line in reader:
                matcher = path_pattern.match(line)
                if matcher:
                    path_value = matcher.group(0).strip()
                    path_value = path_value.rstrip(":")
                    parameter_key = f"{append_value}{extract_parameter_key(path_value)}"
                    write_output(writer, parameter_key, route_value, path_value)
            writer.write("}")

    except IOError as e:
        print(e)

def extract_parameter_key(path_value):
    parts = path_value.split("/")
    last_part = parts[-1]
    if last_part.startswith("{") and last_part.endswith("}"):
        last_part = last_part[1:-1]
    return last_part

def write_output(writer, parameter_key, route_value, path_value):
    writer.write(f'"{parameter_key}": "{route_value}{path_value}",')
    writer.write("\n")

def parameter_extractor():
    input_file_path = Path("src/main/resources/routes_dev.json").resolve()
    output_file_path = Path("src/main/resources/keys.txt").resolve()

    try:
        with open(input_file_path, 'r') as br, open(output_file_path, 'w') as bw:
            json_content = []
            br.readline()  # Skip the first line
            for line in br:
                json_content.append(line.strip())
            sensitive_info_8("".join(json_content), bw)

    except IOError as e:
        print(e)

def sensitive_info_8(json_content, bw):
    pattern = re.compile(r'"(.*?)": *"(.*?)"')
    matcher = pattern.finditer(json_content)

    for match in matcher:
        parameter_key = match.group(1)
        bw.write(f"{parameter_key}:\n")

def swagger_updater_3():
    path = Path("src/main/resources/outputswagger.yaml").resolve()
    keys_file_path = Path("src/main/resources/keys.txt").resolve()

    try:
        keys_list = load_keys(keys_file_path)

        yaml_content = []
        with open(path, 'r') as reader:
            for line in reader:
                yaml_content.append(line)

        updated_yaml_content = replace_values("".join(yaml_content), keys_list)

        with open(path, 'w') as writer:
            writer.write(updated_yaml_content)

    except IOError as e:
        print(e)

def load_keys(keys_file_path):
    keys_list = []
    with open(keys_file_path, 'r') as reader:
        for line in reader:
            line = line.replace(":", "").strip()
            keys_list.append(line)
    return keys_list

def replace_values(yaml_content, keys_list):
    updated_content = []
    lines = yaml_content.split("\n")
    key_index = 0
    paths_encountered = False

    for line in lines:
        if line.strip().startswith("paths:"):
            paths_encountered = True
        if paths_encountered and line.strip().startswith("uri:") and key_index < len(keys_list):
            indentation = line[:line.index("uri:")]
            line = f"{indentation}uri: ${{{keys_list[key_index]}}}"
            key_index += 1
        updated_content.append(line)

    return "\n".join(updated_content)

# Example usage
update_swagger(["RepoName", "tag"])
swagger_updater_2("RepoName")
route_creator(["RepoName", "tag"], "dev")
parameter_extractor()
swagger_updater_3()
